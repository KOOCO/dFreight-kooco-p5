@model Dolphin.Freight.Web.Pages.Shared.Memos._MemoModel
@using Dolphin.Freight.Localization
@using Dolphin.Freight.TradePartners.TradeParties;
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<FreightResource> L
<abp-row>
    <abp-column>
        <abp-button id="@Model.AddButtonId"
                    text=@L["Display:Button:New"]
                    icon="plus"
                    button-type="Outline_Secondary" />
    </abp-column>
</abp-row>
<abp-row>
    <abp-column>
        <abp-table border-style="Bordered" id="@Model.MemoTableId" class="@Model.MemoTableClass nowrap"></abp-table>
    </abp-column>
    <abp-column size="_4">
        <textarea rows="7" class="form-control" readonly id="@Model.MemoContentId"></textarea>
    </abp-column>
</abp-row>

<style>
    .memo-focus {
        background-color: #fff9e5;
    }

    .text-center {
        text-align: center;
    }

    .memo-highlight {
        color: #dfba49;
        -moz-animation: blink normal 1s infinite ease-in-out;
        -webkit-animation: blink normal 1s infinite ease-in-out;
        -ms-animation: blink normal 1s infinite ease-in-out;
        animation: blink normal 1s infinite ease-in-out;
    }

    @@-moz-keyframes blink {
        0% {
            opacity: 1;
        }

        50% {
            opacity: 0.5;
        }

        100% {
            opacity: 1;
        }
    }
    /* Firefox */
    @@-webkit-keyframes blink {
        0% {
            opacity: 1;
        }

        50% {
            opacity: 0.5;
        }

        100% {
            opacity: 1;
        }
    }
    /* Webkit */
    @@-ms-keyframes blink {
        0% {
            opacity: 1;
        }

        50% {
            opacity: 0.5;
        }

        100% {
            opacity: 1;
        }
    }
    /* IE */
    @@keyframes blink {
        0% {
            opacity: 1;
        }

        50% {
            opacity: 0.5;
        }

        100% {
            opacity: 1;
        }
    }
</style>
<script>
    {
        
             var memoDataTable;
        let oldOnload = window.onload;
        let initTable = function () {
            const addButtonId = '@Model.AddButtonId';
            const memoTableId = '@Model.MemoTableId';
            const memoContentId = '@Model.MemoContentId';
            const fType = '@Model.FType';
            const sourceId = '@Model.SourceId';

            let l = abp.localization.getResource('Freight');


            const createMemoModal = new abp.ModalManager({
                viewUrl: '/Shared/Memos/_CreateUpdateMemo',
            });

            createMemoModal.onResult(function () {
                memoDataTable.ajax.reload();
            });

            function showMemoDataTable() {
                console.log(fType);
                console.log(sourceId);
                memoDataTable = $(`#${memoTableId}`).DataTable({
                    order: [[3, 'desc']],
                    paging: false,
                    info: false,
                    searching: false,
                    ajax: function (d, cb) {
                        dolphin.freight.common.memos.memo.getListByQuery({ sourceId, fType }).then(data => cb({ data }));
                    },
                    columnDefs: [
                        {
                            title: l('Actions'),
                            rowAction: {
                                items: [
                                    {
                                        text: l('Edit'),
                                        action: function (data) {
                                            createMemoModal.open({
                                                id: data.record.id,
                                                sourceId,
                                                fType,
                                            });
                                        }
                                    },
                                    {
                                        text: l('Delete'),
                                        confirmMessage: function (data) {
                                            return l(
                                                'AreYouSureToDelete',
                                                data.record.title
                                            );
                                        },
                                        action: function (data) {
                                            dolphin.freight.common.memos.memo.delete(data.record.id)
                                                .then(function () {
                                                    abp.notify.info(l('SuccessfullyDeleted'));
                                                    memoDataTable.ajax.reload();
                                                });
                                        }
                                    },
                                ]
                            },
                            targets: 0,
                            render: function (data, type, row) {
                                return '';
                            },
                            orderable: false,
                        },
                        {
                            title: '<i class="fa fa-bell"></i>',
                            render: function (data, type, row) {
                                return `<input type="checkbox" class="memo-highlight-checkbox" data-id="${row.id}" ${row.highlight === true ? 'checked' : ''} />`;
                            },
                            className: 'text-center',
                            targets: 1,
                            orderable: false,
                        },
                        {
                            title: l('Display:Memo:THead:Title'),
                            render: function (data, type, row) {
                                return `${row.highlight === true ? '<i class="fa fa-bell memo-highlight"></i>' : ''}${row.subject}`;
                            },
                            targets: 2,
                            orderable: false,
                        },
                        {
                            title: l('Display:Memo:THead:LastModified'),
                            render: function (data, type, row) {
                                if (row.lastModificationTime == null) {
                                    return '';
                                }
                                const time = row.lastModificationTime.replaceAll('T', ' ').split('.')[0];
                                return `${row.lastUpdatedUserName}(${time})`;
                            },
                            targets: 3,
                        },
                        {
                            title: l('Display:Memo:THead:CreateTime'),
                            render: function (data, type, row) {
                                const time = row.creationTime.replaceAll('T', ' ').split('.')[0];
                                return `${row.createdUserName}(${time})`;
                            },
                            targets: 4,
                        },
                    ],
                });
            }

            $(document).on('click', `#${memoTableId} .memo-highlight-checkbox`, function (e) {
                const self = $(this);

                dolphin.freight.common.memos.memo.switchHighlight({
                    id: self.data('id'),
                    highlight: self.prop('checked'),
                }).always(result => {
                    memoDataTable.ajax.reload();
                });

                return false;
            });

            $(document).on('click', `#${memoTableId} tbody tr`, function () {
                $(`#${memoTableId} .memo-focus`).removeClass('memo-focus');
                $(this).addClass('memo-focus');
                $(`#${memoContentId}`).html(memoDataTable.row(this).data().content);
            });

            $(`#${addButtonId}`).click(function () {
                createMemoModal.open({
                    sourceId,
                    fType,
                });
            });

            showMemoDataTable();
        };

        window.onload = function () {
            if (!typeof oldOnload == 'function') {
                oldOnload();
            }
            initTable();    
        }
        initTable();

    };
</script>