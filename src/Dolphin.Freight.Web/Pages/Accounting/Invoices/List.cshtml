@page
@using Dolphin.Freight.Localization
@using Dolphin.Freight.Permissions
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Localization
@using Dolphin.Freight.Web.Pages.Components

@using Dolphin.Freight.Web.CommonService
@model Dolphin.Freight.Web.Pages.Accounting.Invoices.ListModel
@inject IStringLocalizer<FreightResource> L
@inject IDropdownService _dropdown;
@section scripts
    {
    <script type="text/javascript">
        var cardIndex = 0;
        var dataTable;
         var l = abp.localization.getResource('Freight');

        $(document).ready(function () {
            var queryAction = function (){
                var parm;
                var typeId=$("#TypeId").val();
                if (typeId == "0") { parm = 0; }
                if (typeId == "1") {parm = 1; }
                if (typeId == "2") { parm = 2; }

                return {
                    QueryInvoiceType: 1,
                    search: $("#Keyword").val(),
                    typeId:parm,
                    officeId: $("#VesselSchedule_OfficeId").val() == '' ? null : $("#VesselSchedule_OfficeId").val(),
                    postDate: $("#PostDate").val() == '' || $("#PostDate").val() == null ? null : new Date($("#PostDate").val()),
                    invoiceDate: $("#InvoiceDate").val() == '' || $("#InvoiceDate").val() == null? null : new Date($("#InvoiceDate").val()),
                    dueDate: $("#DueDate").val() == '' || $("#DueDate").val() == null ? null : new Date($("#DueDate").val()),
                    eta: $("#ETA").val() == '' || $("#ETA").val() == null? null : new Date($("#ETA").val()),
                    etd: $("#ETD").val() == '' || $("#ETD").val() == null ? null : new Date($("#ETD").val()),
                    lastDate: $("#LastDate").val() == '' || $("#LastDate").val() == null ? null : new Date($("#LastDate").val()),
                    invoiceNo: $("#InvoiceNo").val(),
                };
            };

            var columns=[
                {
                    title: '<input type="checkbox" id="selectAllCheckbox" onclick="Invoice.selectAllCheckbox(this)" style=" cursor: pointer;">',
                    data: null,
                    orderable: false,
                    "render": function (data, type, row) {
                        var id = row.id;
                        return '<input type="checkbox" class="selectCheckbox" data-id="' + id + '" " onclick="Invoice.selectCheckbox(this)" style=" cursor: pointer;">';
                    }
                },
                {
                    title: l('Actions'),
                    rowAction: {
                        items:
                        [
                            {
                                text: l('Edit'),
                                visible: abp.auth.isGranted('Settings.ItNoRanges.Edit'), //CHECK for the PERMISSION
                                action: function (data) {
                                    if (data.record.isLocked) {

                                    }

                                    switch (data.record.methodType) {
                                        case 3:
                                            location.href = '/Accounting/Invoice?MethodType=3&InvoiceType=' + data.record.invoiceType + '&MawbId=' + data.record.mawbId + '&Hid=' + data.record.hawbId + '&InvoiceId=' + data.record.id;
                                            break;
                                        case 2:
                                            location.href = '/Accounting/Invoice?MethodType=2&InvoiceType=' + data.record.invoiceType + '&MawbId=' + data.record.mawbId + '&HawbId=' + data.record.hawbId + '&InvoiceId=' + data.record.id;
                                            break;
                                        case 1:
                                            location.href = '/Accounting/Invoice?MethodType=1&InvoiceType=' + data.record.invoiceType + '&Mid=' + data.record.mblId + '&Hid=' + data.record.hblId + '&InvoiceId=' + data.record.id;
                                            break;
                                        case 0:
                                            location.href = '/Accounting/Invoice?MethodType=0&InvoiceType=' + data.record.invoiceType + '&Mid=' + data.record.mblId + '&Hid=' + data.record.hblId + '&InvoiceId=' + data.record.id;
                                            break;
                                    }
                                    
                                }
                            },
                            {
                                text: l('Delete'),
                                visible: function (data) {

                                    return !data.isLocked && abp.auth.isGranted('Settings.ItNoRanges.Delete')
                                },

                                action: function (data) {
                                    if (!data.record.isLocked) {
                                        abp.message.confirm(l('DeletionConfirmationMessage'))
                                            .then(function (confirmed) {
                                                if (confirmed) {
                                                    dolphin.freight.importExport.oceanExports.oceanExportMbl
                                                        .delete(data.record.id)
                                                        .then(function () {
                                                            abp.message.success(l('SuccessfullyDeleted'));
                                                            dataTable.ajax.reload();
                                                        });
                                                }
                                            });

                                    } else {
                                        abp.message.warn("鎖定不能刪除")
                                    }

                                    /*
                                    if (!data.record.isLocked) {
                                        dolphin.freight.importExport.oceanExports.oceanExportMbl
                                            .delete(data.record.id)
                                            .then(function () {
                                                abp.message.success(l('SuccessfullyDeleted'));
                                                dataTable.ajax.reload();
                                            });
                                    } else {
                                        abp.message.warn("鎖定不能刪除")
                                    }*/

                                }
                            }
                        ]
                    }
                }
            ];

            $(function () {
                dolphin.freight.web.controllers.configuration.getJsonConfig('InvoiceList').done(function (data) {
                    data.forEach(function (item) {

                        if (!item.lock && item.checkable) {
                            var column;

                            if (item.text.toLowerCase().includes('invoiceno')) {
                                column = {
                                    //是否鎖定
                                    data: null, title: l('InvoiceNo'),
                                    render: function (data, type, row) {
                                        switch (row.methodType) {
                                            case 3:
                                                var link = '<a href="/Accounting/Invoice?MethodType=3&InvoiceType=' + row.invoiceType + '&MawbId=' + row.mawbId + '&Hid=' + row.hawbId + '&InvoiceId=' + row.id + '">' + row.invoiceNo + '</a>';
                                                break;
                                            case 2:
                                                var link = '<a href="/Accounting/Invoice?MethodType=2&InvoiceType=' + row.invoiceType + '&MawbId=' + row.mawbId + '&HawbId=' + row.hawbId + '&InvoiceId=' + row.id + '">' + row.invoiceNo + '</a>';
                                                break;
                                            case 1:
                                                var link = '<a href="/Accounting/Invoice?MethodType=1&InvoiceType=' + row.invoiceType + '&Mid=' + row.mblId + '&Hid=' + row.hblId + '&InvoiceId=' + row.id + '">' + row.invoiceNo + '</a>';
                                                break;
                                            case 0:
                                                var link = '<a href="/Accounting/Invoice?MethodType=0&InvoiceType=' + row.invoiceType + '&Mid=' + row.mblId + '&Hid=' + row.hblId + '&InvoiceId=' + row.id + '">' + row.invoiceNo + '</a>';
                                                break;
                                        }
                                        
                                        return link;
                                    }
                                }
                            }
                            else if (item.text.toLowerCase().includes('type')) {
                                column = {
                                    data: null, title: l('Type'),
                                    render: function (data, type, row) {
                                        switch (row.invoiceType) {
                                            default:
                                                return "";
                                            case 0:
                                                return l('A/R');
                                            case 1:
                                                return l('Debit');
                                            case 2:
                                                return l('A/P');
                                        }
                                    }
                                }

                            }
                            else {
                                column = {
                                    title: l(item.text),
                                    data: item.name
                                };
                            }
                            columns.push(column);
                        }
                    });

                    var col = (columns.length > 2) ? [[2, 'asc']] : [[0, 'asc']];
                     dataTable = $('#ListTable').DataTable(
                        abp.libs.datatables.normalizeConfiguration({
                            serverSide: true,
                            paging: true,
                            order: col,
                            searching: false,
                            scrollX: true,
                            processing: true,
                            responsive: {
                                details: {
                                    type: 'column'
                                }
                            },
                            autoWidth: false,
                            ajax: abp.libs.datatables.createAjax(dolphin.freight.accounting.invoices.invoice.queryList, queryAction),
                            columnDefs: columns
                        })
                    );

                });

                $('#btnConfiguration').click(function (e) {

                    var _configurationModal = new abp.ModalManager({
                        viewUrl: abp.appPath + 'Configuration',
                        modalClass: 'ConfigurationViewModel'
                    });

                    _configurationModal.open({
                        src: 'InvoiceList'
                    });
                });
        
                $('#Search').click(function (e) {
                    dataTable.ajax.reload();
                });
    
                $('#CancelFilter').click(function (e) {
                    $("#Keyword").val(null);
                   
                    // $("#VesselSchedule_OfficeId").val(null);
                    $("select[name='VesselSchedule_OfficeId']").val(null);
                    
                    $("#TypeId").val(null).trigger("change");
                    $("#PostDate").val(null);
                    $("#ETA").val(null);
                    $("#ETD").val(null);
                    $("#InvoiceDate").val(null);
                    $("#DueDate").val(null);
                    $("#LastDate").val(null);
                    $("#InvoiceNo").val(null);
                    dataTable.ajax.reload();
                });
            });
        });

        var Invoice = {
            selectAllCheckbox: function(element){
                var isChecked = $(element).prop('checked');
                $('#ListTable tbody input.selectCheckbox[type="checkbox"]').prop('checked', isChecked);
                
                if (isChecked) {
                    $('#btnDelete').prop('disabled', false);
                    $('#detailedId').prop('disabled', false);
                
                
                } else {
                    $('#btnDelete').prop('disabled', true);
                    $('#detailedId').prop('disabled', true);
                }
            },
            selectCheckbox: function (checkbox) {
                var checkedCheckboxes = $('.selectCheckbox:checked');
                if (checkbox.checked) {
                    $('#summaryId').prop('disabled', false);
                      if (checkedCheckboxes.length > 0) {
                $('#btnDelete').prop('disabled', false);
            } else {
                $('#btnDelete').prop('disabled', true);
            }
                
                    if (checkedCheckboxes.length == 1) {
                        $('#copyId').prop('disabled', false);
                    }
                    else {
                        $('#copyId').prop('disabled', true);
                    }
                   
                   
                } else {
                    $('#summaryId').prop('disabled', true);
                     if (checkedCheckboxes.length > 0) {
                $('#btnDelete').prop('disabled', false);
            } else {
                $('#btnDelete').prop('disabled', true);
            }
                    var checkedCheckboxes = $('.selectCheckbox:checked');
                    if (checkedCheckboxes.length == 1) {
                        $('#copyId').prop('disabled', false);
                    }
                    else {
                        $('#copyId').prop('disabled', true);
                    }
                 
                }
                if (!$(checkbox).prop('checked')) {
                    $('#selectAllCheckbox').prop('checked', false);
                } else {
                    var allChecked = true;
                    $('#ListTable tbody input.selectCheckbox[type="checkbox"]').each(function () {
                        if (!$(this).prop('checked')) {
                            allChecked = false;
                            return false;
                        }
                    });
                    $('#selectAllCheckbox').prop('checked', allChecked);
                }
            },
    
            createNew: function () {
                window.location.href = '/AirExports/CreateMawb';
            }
        }

        function deleteInvoices() {
            var ids = [];
            var selectedCheckboxes = $('#ListTable tbody input.selectCheckbox[type="checkbox"]:checked');
            for (var i = 0; i < selectedCheckboxes.length; i++) {
                var id = selectedCheckboxes[i].attributes[2].value;
                ids.push(id);

                abp.message.confirm(l('DeleteConfirmationMessage')).then(function (confirmed) {
                    if (confirmed) {
                        dolphin.freight.accounting.invoices.invoice.deleteMultipleInvoicesByIds(ids).done(function () 
                        {
                            abp.message.success(l('Message:SuccessDelete')).then(function () {
                                dataTable.ajax.reload();
                            });
                        });
                    }
                });
            }
        }
        function doCopy() {
            var checkedCheckboxes =$('#ListTable tbody input.selectCheckbox[type="checkbox"]:checked');

            // Find the first checked checkbox
            var firstCheckedCheckbox = checkedCheckboxes.first();
             var id = checkedCheckboxes[0].attributes[2].value;
                    dolphin.freight.accounting.invoices.invoice.get(id).done(function (data) {
                    debugger
                    var href="/Accounting/Invoice?MethodType=7&InvoiceType=" + data.invoiceType + "&Mid=" + data.mblId + "&Hid=" + data.hblId + "&CopyInvoiceId=" + data.id;
                        location.href = href;
                    })
                    
        }
    </script>
}
<div class="page-header">
    <div class="breadcrumb-wrapper">
        <abp-breadcrumb>
            <abp-breadcrumb-item title=@L["Menu:Accounting"] />
            <abp-breadcrumb-item title=@L["Menu:Invoice"] />
            <abp-breadcrumb-item title=@L["Menu:Invoice.List"] href="#" />
        </abp-breadcrumb>
    </div>
</div>
<div class="page-content-area">
    <abp-card>
        <abp-card-header>
           
        <abp-row class="w-100">
                <abp-column style="display: flex;" size-md="_8">
    <abp-card-title style="margin-right: 5px;">@L["Menu:Invoice.List"]</abp-card-title>
<ul style="margin-top: -5px;" class="porlet-title-list">
                    <li class="title ng-binding">Total:</li>
                    <li>
                        <strong class="ng-binding">Invoice Amount:</strong><span class="font-blue ng-binding">0</span>
                    </li>
                    <li>
                        <strong class="ng-binding">Paid Amount:</strong><span class="font-blue ng-binding">0</span>
                    </li>
                    <li>
                        <strong class="ng-binding">Balance:</strong><span ng-class="{'text-success':vm.invoice_total_balance>=0, 'text-danger':vm.invoice_total_balance<0}" class="ng-binding text-success" style="">0</span>
                    </li>
                </ul>
</abp-column>
                <abp-column size-md="_4" class="text-end p-0">
                    <abp-button id="FilterGlCodeButton"
                            text="@L["Filter"].Value"
                            icon="filter"
                            button-type="Primary"
                            data-bs-toggle="collapse" data-bs-target="#mblDiv" aria-expanded="true" aria-controls="mblDiv" />
                    <abp-button id="btnConfiguration"
                                text="@L["Configuration"].Value"
                                icon="gear"
                                button-type="Primary" />
                </abp-column>
            </abp-row>
    </abp-card-header>
    <abp-card-body class="collapse hide" id="mblDiv">
            <abp-row class="mb-3">
                <abp-column size-md="_1">
                    <label>@L["Keyword"].Value</label>
                </abp-column>
                <abp-column size-md="_2">
                    <input class="form-control" id="Keyword" />
                </abp-column>
                 <abp-column size-md="_1">
                    <label>@L["InvoiceNo"].Value</label>
                </abp-column>
                <abp-column size-md="_2">
                    <input class="form-control" id="InvoiceNo" />
                </abp-column>
                     <abp-column size-md="_1">
                    <label>@L["Office"].Value</label>
                </abp-column>
                <abp-column size-md="_2">
                  @await Component.InvokeAsync(typeof(DropdownComponent), new ComponentData { Name = "VesselSchedule.OfficeId", AspItems =  _dropdown.SubstationLookupList, IsShowLabel = false, FieldName = "OfficeId", SelectType = 0,  })
            </abp-column>
                    <abp-column size-md="_1">
                    <label>@L["Type"].Value</label>
                </abp-column>
                <abp-column size-md="_2">
               <select id="TypeId" class="form-select">
                <option value=""></option>
                   <option value="0">@L["A/R"]</option>
                    <option value="1">@L["A/P"]</option>
                    <option value="2">@L["Debit"]</option>
               </select>
                
                </abp-column>
            </abp-row>
         
            <abp-row class="mb-3">
               

            </abp-row>
            <abp-row class="mb-3">
                <abp-column size-md="_1">
                    <label>@L["PostDate"].Value</label>
                </abp-column>
                <abp-column size-md="_2">
                    <input class="form-control" type="date" id="PostDate" />
                </abp-column>
               <abp-column size-md="_1">
                    <label>@L["InvoiceDate"].Value</label>
                </abp-column>
                <abp-column size-md="_2">
                    <input class="form-control" type="date" id="InvoiceDate" />
                </abp-column>
               
               
                <abp-column size-md="_1">
                    <label>@L["ETD"].Value</label>
                </abp-column>
                <abp-column size-md="_2">
                    <input type="date" class="form-control" id="ETD" />
                </abp-column>
                <abp-column size-md="_1">
                    <label>@L["ETA"].Value</label>
                </abp-column>
                <abp-column size-md="_2">
                    <input type="date" class="form-control" id="ETA" />
                </abp-column>
            </abp-row>
            <abp-row class="mb-3">
                <abp-column size-md="_1">
                    <label>@L["DueDate"].Value</label>
                </abp-column>
                <abp-column size-md="_2">
                    <input type="date" class="form-control" id="DueDate" />
                </abp-column>
                <abp-column size-md="_1">
                    <label>@L["LastPaidDate"].Value</label>
                </abp-column>
                <abp-column size-md="_2">
                    <input type="date" class="form-control" id="LastDate" />
                </abp-column>
                          </abp-row>
            
            <abp-row>
                <abp-abp-column class="text-center">
               
                    <abp-button type="button" id="CancelFilter" text="@L["Cancel"]" button-type="Danger" />

                    <abp-button type="button" id="Search" text="@L["Search"]" button-type="Primary" />
               
                </abp-abp-column>
            </abp-row>
            </abp-card-body>
    <abp-card-body>
          <div class="portlet-tool">
                <div class="btn-group" role="group" aria-label="Basic outlined example" >
                  <button type="button" id="newBtn" class="btn btn-outline-secondary" disabled >@L["Batchupdateinvoices"]</button>
                    <button type="button" id="copyId" class="btn btn-outline-secondary" onclick="doCopy()" disabled><i class="fa fa-files-o me-0"></i></button>
                    <button type="button" class="btn btn-outline-secondary"  id="btnDelete" onclick="deleteInvoices()" disabled><i class="fa fa-trash me-0"></i></button>
                </div>
               
            </div>
            <abp-table striped-rows="true" id="ListTable" style="width:2000px;" class="nowrap"></abp-table>
    </abp-card-body>
</abp-card>
</div>