@page
@using Dolphin.Freight.Web.CommonService
@using Volo.Abp.Users
@using Dolphin.Freight.Localization
@using Dolphin.Freight.Web.Pages.Components
@using Dolphin.Freight.Web.Pages.Shared.Memos;
@using Microsoft.Extensions.Localization
@model Dolphin.Freight.Web.Pages.OceanExports.VesselSchedules.EditModel
@inject IStringLocalizer<FreightResource> L
@inject ICurrentUser CurrentUser
@inject IDropdownService _dropdown;
@section styles {
    <style type="text/css">
        #ejo .btn-primary {
            color: #fff;
            background-color: rgb(0 123 255 / 52%);
            border-color: #007bff;
        }

        .fas {
            margin-right: 10px;
        }
    </style>

    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css" rel="stylesheet">
}
@section scripts
    {
    <abp-script src="/Pages/OceanExports/VesselSchedules/EditVessel.js" />
    <script type="text/javascript">
          var trindex = 0;
         var containerSizes = [];
        $(document).ready(function () {
            var l = abp.localization.getResource('Freight');
            var showMsg = '@Model.ShowMsg';
            if (showMsg == 'True') {
                var EmptyGuid = '00000000-0000-0000-0000-000000000000';
                dolphin.freight.common.memos.memo.getListByQuery({sourceId:EmptyGuid, fType:10 }).done(function (result) {
                    var item = result;
                    if (item.length>0) {
                        dolphin.freight.common.memos.memo.updateSourceId('@Model.Id', 10).done(function (response) {
                            memoDataTable.ajax.reload();
                            abp.message.success(l("Message:SuccessAdd"));

                        })
                    } else {
                       abp.message.success(l("Message:SuccessAdd"));
                    }
                })
            }

            initializeDropdownSearch("VesselSchedule_OfficeId");
            initializeDropdownSearch("VesselSchedule_BlTypeId");
            initializeDropdownSearch("VesselSchedule_MblCarrierId");
            initializeDropdownSearch("VesselSchedule_BlAcctCarrierId");
            initializeDropdownSearch("VesselSchedule_ShippingAgentId");
            initializeDropdownSearch("VesselSchedule_MblOverseaAgentId");
            initializeDropdownSearch("VesselSchedule_MblNotifyId");
            initializeDropdownSearch("VesselSchedule_ForwardingAgentId");
            initializeDropdownSearch("VesselSchedule_CoLoaderId");
            initializeDropdownSearch("VesselSchedule_DeliveryToId");
            initializeDropdownSearch("VesselSchedule_EmptyPickupId");
            initializeDropdownSearch("VesselSchedule_PolId");
            initializeDropdownSearch("VesselSchedule_PorId");
            initializeDropdownSearch("VesselSchedule_PodId");
            initializeDropdownSearch("VesselSchedule_DelId");
            initializeDropdownSearch("VesselSchedule_FdestId");
            initializeDropdownSearch("VesselSchedule_FreightTermId");
            initializeDropdownSearch("VesselSchedule_ShipModeId");
            initializeDropdownSearch("VesselSchedule_SvcTermFromId");
            initializeDropdownSearch("VesselSchedule_SvcTermToId");
            initializeDropdownSearch("VesselSchedule_OblTypeId");
            initializeDropdownSearch("VesselSchedule_TransPort1Id");

            $(document).ready(function () {
                const ids = [
                    "VesselSchedule_PolEtd",
                    "VesselSchedule_PorEtd",
                    "VesselSchedule_PodEta",
                    "VesselSchedule_DelEta",
                    "VesselSchedule_FdestEta",
                    "VesselSchedule_RailCutOffTime",
                    "VesselSchedule_PortCutOffTime",
                    "VesselSchedule_VgmCutOffTime",
                    "VesselSchedule_OnBoardDate",
                    "VesselSchedule_Trans1Eta"
                ];

                ids.forEach(function (id) {
                    let dateElem = $('#' + id);

                    if (dateElem.length === 0) {
                        return;
                    }

                    dateElem.removeAttr('type').datetimepicker({
                        format: 'Y-m-d H:i',
                        step: 15,
                        allowInput: false
                    });

                    let currentVal = dateElem.val();
                    if (currentVal.includes('T')) {
                        dateElem.val(currentVal.replace('T', ' '));
                    }
                });
            });

            //系統參數
            //dolphin.freight.common.ajaxDropdown.getSysCodeDtosByType({ queryType: 'BlTypeId' }).done(function (result) {
            //    if (result != null && result.length > 0) {
            //        initSysCodeTag(result, "BlTypeId", $("#mBlTypeId").val())

            //    }
            //});
            //dolphin.freight.common.ajaxDropdown.getSysCodeDtosByType({ queryType: 'OblTypeId' }).done(function (result) {
            //    if (result != null && result.length > 0) {
            //        initSysCodeTag(result, "OblTypeId", $("#mOblTypeId").val())

            //    }
            //});
            //dolphin.freight.common.ajaxDropdown.getSysCodeDtosByType({ queryType: 'FreightTermId' }).done(function (result) {
            //    if (result != null && result.length > 0) {
            //        initSysCodeTag(result, "FreightTermId", $("#mFreightTermId").val())
            //    }
            //});
            //dolphin.freight.common.ajaxDropdown.getSysCodeDtosByType({ queryType: 'ShipModeId' }).done(function (result) {
            //    if (result != null && result.length > 0) {
            //        initSysCodeTag(result, "ShipModeId", $("#mShipModeId").val())
            //    }
            //});

            //dolphin.freight.common.ajaxDropdown.getSysCodeDtosByType({ queryType: 'SvcTermFromId' }).done(function (result) {
            //    if (result != null && result.length > 0) {
            //        initSysCodeTag(result, "SvcTermFromId", $("#mSvcTermFromId").val())
            //        initSysCodeTag(result, "SvcTermToId", $("#mSvcTermToId").val())
            //    }
            //});
            ////分站
            //dolphin.freight.settings.substations.substation.getSubstations({}).done(function (result) {
            //    if (result != null && result.length > 0) {
            //        initSubstationsTag(result, "OfficeId", $("#mOfficeId").val())
            //    }
            //});
            ////貿易夥伴
            //dolphin.freight.tradePartners.tradePartner.getList({}).done(function (result) {
            //    var selectItems = result.items;
            //    initTradePartnerSelect(selectItems, "MblCarrierId", $("#mMblCarrierId").val());
            //    initTradePartnerSelect(selectItems, "BlAcctCarrierId", $("#mBlAcctCarrierId").val());
            //    initTradePartnerSelect(selectItems, "ShippingAgentId", $("#mShippingAgentId").val());
            //    initTradePartnerSelect(selectItems, "MblOverseaAgentId", $("#mMblOverseaAgentId").val());
            //    initTradePartnerSelect(selectItems, "MblNotifyId", $("#mMblNotifyId").val());
            //    initTradePartnerSelect(selectItems, "ForwardingAgentId", $("#mForwardingAgentId").val());
            //    initTradePartnerSelect(selectItems, "CoLoaderId", $("#mCoLoaderId").val());
            //    initTradePartnerSelect(selectItems, "DeliveryToId", $("#mDeliveryToId").val());
            //    initTradePartnerSelect(selectItems, "EmptyPickupId", $("#mEmptyPickupId").val());

            //});
            ////港口
            //dolphin.freight.settings.ports.port.getList({}).done(function (result) {
            //    console.log(result.items);
            //    if (result != null && result.items != null && result.items.length > 0) {
            //        initPortsTag(result.items, "PorId", $("#mPorId").val())
            //        initPortsTag(result.items, "PolId", $("#mPolId").val())
            //        initPortsTag(result.items, "PodId", $("#mPodId").val())
            //        initPortsTag(result.items, "DelId", $("#mDelId").val())
            //        initPortsTag(result.items, "FdestId", $("#mFdestId").val())

            //    }
            //});
            $("#saveEditBtn").click(function () {
                $("#mOfficeId").val($("#OfficeId").val());
                $("#mMblSalesTypeId").val($("#MblSalesTypeId").val());
                $("#mSvcTermFromId").val($("#SvcTermFromId").val());
                $("#mSvcTermToId").val($("#SvcTermToId").val());
                $("#mShipModeId").val($("#ShipModeId").val());
                $("#mFreightTermId").val($("#FreightTermId").val());
                $("#mBlTypeId").val($("#BlTypeId").val());
                $("#mMblCarrierId").val($("#MblCarrierId").val());
                $("#mBlAcctCarrierId").val($("#BlAcctCarrierId").val());
                $("#mShippingAgentId").val($("#ShippingAgentId").val());
                $("#mMblOverseaAgentId").val($("#MblOverseaAgentId").val());
                $("#mMblNotifyId").val($("#MblNotifyId").val());
                $("#mMblReferralById").val($("#MblReferralById").val());
                $("#mEmptyPickupId").val($("#EmptyPickupId").val());
                $("#mDeliveryToId").val($("#DeliveryToId").val());
                $("#mCoLoaderId").val($("#CoLoaderId").val());
                $("#mForwardingAgentId").val($("#ForwardingAgentId").val());
                $("#mCareOfId").val($("#CareOfId").val());
                $("#mPorId").val($("#PorId").val());
                $("#mPolId").val($("#PolId").val());
                $("#mPodId").val($("#PodId").val());
                $("#mDelId").val($("#DelId").val());
                $("#mFdestId").val($("#FdestId").val());
                $('#editForm').submit();
            });
            $('#editForm').on('abp-ajax-success', function (result, rs) {
                event.preventDefault();
                var l = abp.localization.getResource('Freight');
                abp.message.success(l("Message:SuccessEdit")).then(function(res){
                    window.location.href = '/OceanExports/VesselSchedules/Index';
                });
            });
            $("#addBtn").click(function () {
                addTr()
            })
        });
        dolphin.freight.settings.containerSizes.containerSize.queryAllList({}).done(function (result) {
            debugger;
                if (result != null && result.length > 0) {
                    debugger;
                    containerSizes = result;
                    dolphin.freight.importExport.containers.container.queryListVessel( '@Model.Id' ).done(function (result) {
                        debugger;
                        if (result != null && result.length > 0) {
                            debugger;
                            for (var i = 0; i < result.length; i++) {
                                var value0 = result[i].id
                                var value1 = result[i].containerNo;
                                var value2 = result[i].containerSizeId;
                                var value3 = result[i].sealNo;
                                var value4 = result[i].packageNum;
                                var value5 = result[i].packageWeight;
                                var value6 = result[i].packageMeasure;
                                addTrTag(value0, value1, value2, value3, value4, value5, value6);

                            }
                        }
                    });
                }
            });
        var cardIndex = 0;
        //function addHBtn() {
        //    if (cardIndex == 0) {
        //        var divHtml = addCardRight('new_' + cardIndex, 'new HB/L', '', '#f3c200');
        //        $("#hblCard").show();
        //        $("#hblCardDiv").append(divHtml)
        //        cardIndex++;
        //    } else {
        //        var l = abp.localization.getResource('Freight');
        //        abp.message.info(l("Message:AddHBLErr"));
        //    }

        //}

        $('#addHBtn').on('click', function () {
            if ($('#vesselDiv')[0].classList.contains('show')) {
                $('#btnVesselCollapse').click();
            }

            if ($('#btnBookingCardCollapse_0').length) {
                showAlert(alertConfirmation2, 'Store');
            }
            else {

                let bookingcard = createBookingCard();

                let index = $('.booking_sm_area').find('.card').length;
                bookingcard = setBookingCardValues(bookingcard, '00000000-0000-0000-0000-000000000000', '0', index);

                $('#bookingCards').append(bookingcard);

                setTimeout(() => {
                    $('.bookingCardTitle')[index].click();
                }, 500);
            }
        })

        function onSetCommodity() {
            dolphin.freight.importExport.oceanExports.exportBookings.exportBooking.getBookingCardById($('#ExportBookingDto_Id').val()).done(function(res) 
            { 
                var commodities = res.extraProperties.Commodities;

                if (commodities && commodities.length) {
                    var commodityIndex = 0;
                    commodities.forEach(function (commodity) {
                        commodity.chkIndex = commodityIndex;

                        var newRow = $('#commodityTemplate').tmpl(commodity);
                        $('#commodityBody').append(newRow);

                        commodityIndex += 1;
                    });

                    $('#btnCommodity').removeAttr('disabled');
                    $('#btnCommodityHTS').removeAttr('disabled');
                }
            });
        }

        function setPoValue() {
            var tagOptions = {};
            var poNos = '';
            tagOptions.onDel = function () {
                setTimeout(() => {
                    var tags = $('#PoNoTag').tagsStr();
                    $('#ExportBooking_PoNo').val(tags);
                    if (!tags) {
                        $('#btnPO').attr('disabled', 'disabled');
                    }
                }, 100)
            }

            $("#PoNoTag").tagsInit(tagOptions);

            dolphin.freight.importExport.oceanExports.exportBookings.exportBooking.getBookingCardById($('#ExportBookingDto_Id').val()).done(function (res) {
                poNos = res.poNo;
            });

            if (poNos) {
                poNos.split(',').forEach((poNo) => $("#PoNoTag").tagsAdd(poNo, poNo));
                $('#btnPO').removeAttr('disabled');
            }

            $('#PoNoTag_tag_input').keypress(function (event) {
                var keycode = (event.keyCode ? event.keyCode : event.which);
                if (keycode == '13') {
                    $('#ExportBooking_PoNo').val($('#PoNoTag').tagsStr());
                    $('#btnPO').removeAttr('disabled');
                }
            });
        }

        function initHideBtn() {
            var isHide = $("#isHide").val();
            if (isHide == 1) {
                $(".hideArea").hide();
                $("#hideLi").hide();
                $("#showLi").show();
                $("#isHide").val(0);
            } else {
                $(".hideArea").show();
                $("#hideLi").show();
                $("#showLi").hide();
                $("#isHide").val(1);
            }
        }

        function initReasonStatus() {
            var locked = !$("#ExportBooking_IsCanceled").is(":checked");
            $("#ExportBooking_CanceledDate").attr('readonly', locked);

            $("#drop_CancelReason").attr('readonly', locked);
            if (!locked) {
                $("#ExportBookingDto_CancelName").val(abp.currentUser.userName);
                $("#ExportBookingDto_CancelById").val(abp.currentUser.id);
            } else {
                $("#ExportBookingDto_CancelName").val("");
                $("#ExportBookingDto_CancelById").val("");
            }
        }

        function initRemark(remarkIndex) {
            $(".remarkArea").hide();
            switch (remarkIndex) {
                default:
                    $("#ExportBooking_BookingRemark").show();
                    break;
                case 1:
                    $("#ExportBooking_ShippingRemark").show();
                    break;
                case 2:
                    $("#ExportBooking_CargoRemark").show();
                    break;

            }
        }

        function onBookingCardClick(e, bookingId) {
            var element = e.currentTarget || e.target || e.srcElement;
            var bookingNo = element.id.split('_')[1];

            if ($('#btnBookingCardCollapse_0').length && bookingNo != 0) {
                BOOKINGNO = bookingNo;
                showAlert(alertConfirmation, 'Continue');
            }
            else {
                var color = getComputedStyle(element.parentElement.parentElement).backgroundColor;

                if (!$('#btnBookingCardCollapse_' + bookingNo).attr('class').includes('collapsed')) {
                    $('.bookingCardBookingNo').addClass('d-none');
                    $('#bookCard_' + bookingNo).removeClass('d-none');
                }
                else {

                    var ajaxParams = undefined;

                    Swal.fire({
                        title: 'Loading...',
                        didOpen: () => {
                            Swal.showLoading()
                        }
                    })

                    abp.ajax($.extend(true, {
                        url: abp.appPath + 'api/ImportExport/ExportBookingBasic?Id=' + bookingId,
                        type: 'GET',
                        dataType: "html",
                    }, ajaxParams)).done(function (partial) {
                        $('#partialContainer').html('');
                        $('#partialContainer').html(partial);
                        $('#bookCard').find('.card-header').attr('style', 'background:' + color + ';color:white')
                        Swal.clickCancel();
                        //if (isLocked == 'True') abp.message.warn(l("Message:LockMessage"));
                        setTimeout(() => {
                            var l = abp.localization.getResource('Freight');

                            $('#ExportBooking_SoNoDate').datetimepicker({
                                format: 'Y-m-d H:i',
                                step: 15,
                                allowInput: false,
                                value: new Date()
                            });

                            const ids = [
                                'ExportBookingDto_SoNoDate',
                                'ExportBookingDto_PorEtd',
                                'ExportBookingDto_PodEta',
                                'ExportBookingDto_DelEta',
                                'ExportBookingDto_FdestEta',
                                'ExportBookingDto_WhCutOffTime',
                                'ExportBookingDto_DocCutOffTime',
                                'ExportBookingDto_PortCutOffTime',
                                'ExportBookingDto_VgmCutOffTime',
                                'ExportBookingDto_RailCutOffTime',
                                'ExportBookingDto_EarlyReturnDatetime',
                                'ExportBookingDto_Trans1Eta'
                            ];

                            ids.forEach(function (id) {
                                let dateElem = $('#' + id);

                                if (dateElem.length === 0) {
                                    return;
                                }

                                dateElem.removeAttr('type').datetimepicker({
                                    format: 'Y-m-d H:i',
                                    step: 15,
                                    allowInput: false
                                });

                                let currentVal = dateElem.val();
                                if (currentVal.includes('T')) {
                                    dateElem.val(currentVal.replace('T', ' '));
                                }
                            });

                            initializeDropdownSearch("ExportBookingDto_CancelReason");
                            initializeDropdownSearch("ExportBookingDto_ReferenceId");
                            initializeDropdownSearch("ExportBookingDto_CarrierId");
                            initializeDropdownSearch("ExportBookingDto_ShipModeId");
                            initializeDropdownSearch("ExportBookingDto_FreightTermForBuyerId");
                            initializeDropdownSearch("ExportBookingDto_FreightTermForSalerId");
                            initializeDropdownSearch("ExportBookingDto_SvcTermFromId");
                            initializeDropdownSearch("ExportBookingDto_SvcTermToId");
                            initializeDropdownSearch("ExportBookingDto_IncotermsId");
                            initializeDropdownSearch("ExportBookingDto_CargoTypeId");
                            initializeDropdownSearch("ExportBookingDto_ShipperId");
                            initializeDropdownSearch("ExportBookingDto_CustomerId");
                            initializeDropdownSearch("ExportBookingDto_BillToId");
                            initializeDropdownSearch("ExportBookingDto_ConsigneeId");
                            initializeDropdownSearch("ExportBookingDto_NotifyId");
                            initializeDropdownSearch("ExportBookingDto_ShippingAgentId");
                            initializeDropdownSearch("ExportBookingDto_HblAgentId");
                            initializeDropdownSearch("ExportBookingDto_CoLoaderId");
                            initializeDropdownSearch("ExportBookingDto_FbaId");
                            initializeDropdownSearch("ExportBookingDto_CargoPickupId");
                            initializeDropdownSearch("ExportBookingDto_TruckerId");
                            initializeDropdownSearch("ExportBookingDto_DeliveryToId");
                            initializeDropdownSearch("ExportBookingDto_DelId");
                            initializeDropdownSearch("ExportBookingDto_SalespersonId");
                            initializeDropdownSearch("ExportBookingDto_PorId");
                            initializeDropdownSearch("ExportBookingDto_PolId");
                            initializeDropdownSearch("ExportBookingDto_PodId");
                            initializeDropdownSearch("ExportBookingDto_FdestId");
                            initializeDropdownSearch("ExportBookingDto_TransPort1Id");
                            initializeDropdownSearch("ExportBookingDto_OfficeId");
                            initializeDropdownSearch("ExportBookingDto_ReferralById");
                            initializeDropdownSearch("ExportBookingDto_EmptyPickupId");

                            $("#checkHideBtn").click(function () {
                                initHideBtn();
                            });
                            $("#ExportBooking_IsCanceled").change(function () {
                                initReasonStatus()
                            });
                            $('#ExportBooking_IsCreateBySystem').on('click', function (res) {
                                var l = abp.localization.getResource('Freight');
                                if (res.currentTarget.checked) {
                                    abp.message.confirm(l('SystemBookingNoConfirm')).then(function (confirmed) {
                                        if (confirmed) {
                                            dolphin.freight.settings.sysCodes.sysCode.getSystemBookingNo({ queryType: 'ExportBooking_SoNo' }).done(function (rs) {
                                                $('#ExportBooking_SoNo').val(rs);
                                            });
                                        }
                                    });
                                }
                            })

                            onSetCommodity();
                            setPoValue();
                            initHideBtn();
                            initRemark(0);
                            initReasonStatus();

                            dolphin.freight.importExport.oceanExports.exportBookings.exportBooking.getBookingCardById($('#ExportBookingDto_Id').val()).done(function (res) {
                                var sono = res.soNo;
                                $('#ExportBooking_SoNo').val(sono);
                            });
                        }, 500);
                    })

                    $('.btnBookingCardCollapse').each(function (i, e) {
                        let tempBookingNo = e.id.split('_')[1];
                        if (tempBookingNo == bookingNo) {
                            $('#btnBookingCardCollapse_' + bookingNo).click();
                        }
                        else {
                            $('#btnBookingCardCollapse_' + tempBookingNo).addClass('collapsed');
                            $('#btnBookingCardCollapse_' + tempBookingNo).attr('aria-expanded', 'false');
                            $('#bookingCard_' + i).removeClass('show');
                        }
                    })
                }
            }
        }

        function createBookingCard() {
            let abpCard = '<div class="{{divClass}}"><div class="card-header pointer"><h5 class="card-title bookingCardTitle" id="title_{{bookingNo}}"' +
                ' onclick="onBookingCardClick(event,{{bookingCardId}})">{{bookingNo}}</h5>' +
                ' <button type="button" class="btn d-none btn-collapse collapsed btnBookingCardCollapse" data-val="{{index}}" data-bs-toggle="collapse" id="btnBookingCardCollapse_{{bookingNo}}" data-bs-target="#{{cardBodyId}}" aria-expanded="false" aria-controls="mawbDiv">' +
                ' <i class="fa fa-caret-down" style="color:#FFFFFF;"></i></button > </div><div class="card-body collapse" id="{{cardBodyId}}" style="min-height:150px !important"></div>';
            return abpCard;
        }

        function setBookingCardValues(abpcard, cardId, bookingNo, index) {
            let apbCardClass = 'card board-item booking-sm-' + index;
            let cardBodyId = 'bookingCard_' + index;
            cardId = "'" + cardId + "'";

            abpcard = abpcard.replaceAll("{{divClass}}", apbCardClass);
            abpcard = abpcard.replaceAll("{{bookingNo}}", bookingNo);
            abpcard = abpcard.replaceAll("{{bookingCardId}}", cardId);
            abpcard = abpcard.replaceAll("{{index}}", index);
            abpcard = abpcard.replaceAll("{{cardBodyId}}", cardBodyId);

            return abpcard;
        }

        function showAlert(funName, buttonName) {
            Swal.fire({
                icon: 'error',
                text: 'The data has not been saved, are you sure you want to ' + buttonName.toLowerCase() + '?',
                showCancelButton: true,
                confirmButtonText: buttonName,
            }).then(funName)
        }

        function alertConfirmation(result) {
            if (result.isConfirmed) {
                let indx = $('.booking_sm_area').find('.card').length;
                $('#btnBookingCardCollapse_0').parent().parent().remove();
                if (BOOKINGNO) {
                    $('#title_' + BOOKINGNO).click()
                }
                else {
                    $('#bookingCard_' + (indx - 2)).parent().find('.card-title').click();
                }
            }
        }

        function alertConfirmation2() {
            $('#saveBtn').click();
        }

        function resetIndexes() {
            var newIndex = 0;
            $("#trtbody tr:visible").each(function () {
                if ($(this).attr("id").startsWith("tr_")) {
                    $(this).attr("id", "tr_" + newIndex);

                    $(this).find("input, div.input-group").each(function () {
                        if (this.name) {
                            this.name = this.name.replace(/\[.*?\]/, "[" + newIndex + "]");
                        }
                        if (this.id) {
                            var parts = this.id.split("_");
                            this.id = parts[0] + "_" + newIndex;
                        }
                    });

                    $(this).find("td:eq(1)").text(newIndex + 1);
                    newIndex++;
                }
            });

            trindex = newIndex;
        }

        function addTrTag(value0, value1, value2, value3, value4, value5, value6, value7, value8) {
            var serialNo = trindex+1;
            var trhtml = "<tr id='tr_" + trindex + "'><td><input type='hidden' name='CreateUpdateContainerDtos[" + trindex + "].Status' value='0' id='did_" + trindex + "' />  <input type='checkbox' name='f0' id='f0_" + trindex + "'  value='" + trindex + "'    /></td>"
            trhtml = trhtml + "<td>"+ serialNo +"</td>"
            trhtml = trhtml + "<td><div class='input-group'><input type='text' name='CreateUpdateContainerDtos[" + trindex + "].ContainerNo' id='f1_" + trindex + "' class='form-control' value='" + value1 + "'/> <div class='input-group-append'><button type='button'  onclick='exportDiv(\"" + trindex + "\");' >+</button> </div></div></td>"
            trhtml = trhtml + "<td> <input type='hidden' name='CreateUpdateContainerDtos[" + trindex + "].Id' value='" + value0 + "' /><input type='hidden' name='CreateUpdateContainerDtos[" + trindex + "].MblType' value='4' />";
            trhtml = trhtml + getcontainerSizeSelect(value2) + "</td>";
            trhtml = trhtml + "<td><input type='text' name='CreateUpdateContainerDtos[" + trindex + "].SealNo' id='f3_" + trindex + "' class='form-control' value='" + value3 + "' /></td>"
            trhtml = trhtml + "<td></td>"
            //trhtml = trhtml + "<td><input type='text' name='CreateUpdateContainerDtos[" + trindex + "].SealNo' id='f4_" + trindex + "' class='form-control' value='" + value4 + "' /></td>"
            trhtml = trhtml + "<td><input type='text' name='CreateUpdateContainerDtos[" + trindex + "].PackageNum ' id='f4_" + trindex + "' class='form-control' value='" + value4 + "' /></td>"
            trhtml = trhtml + "<td><input type='text' name='CreateUpdateContainerDtos[" + trindex + "].PackageWeight' id='f5_" + trindex + "' class='form-control' value='" + value5 + "' /></td>"
            trhtml = trhtml + "<td><input type='text' name='CreateUpdateContainerDtos[" + trindex + "].PackageMeasure' id='f6_" + trindex + "' class='form-control' value='" + value6 + "' /></td>"
            trhtml = trhtml + "</tr>"
            trhtml = trhtml + "<tr id='tr2_" + trindex + "' style='display:none;'><td colspan='6'><div></div></td>"
            trhtml = trhtml + "</tr>"
            $("#trtbody").append(trhtml);
             trindex++;
        }
           
        function addCardRight(hblId, hblNo, soNo, bgColor) {
            var cardHtml = "<div id='card_" + hblId + "' class='card mt-3' onclick=''>"
            cardHtml = cardHtml + "<div class='card-body'  style='background:" + bgColor + ";color:#FFFFFF;'>"
            cardHtml = cardHtml + "<p class='card-text'> " + hblNo + ".</p>"
            cardHtml = cardHtml + "<p class='card-text'> " + soNo + ".</p>"
            cardHtml = cardHtml + " </div> </div>"
            return cardHtml;
        }
        function addTr() {
            addTrTag("", "", "", "", "", "","","");
        }
        function getcontainerSizeSelect(selectedId) {
            var selectHtml = "<select name='CreateUpdateContainerDtos[" + trindex + "].ContainerSizeId' class='form-control' >";
            for (var i = 0; i < containerSizes.length; i++) {
                selectHtml = selectHtml + "<option value='" + containerSizes[i].id + "' ";
                if (containerSizes[i].id == selectedId) selectHtml = selectHtml + " selected ";
                selectHtml = selectHtml + ">" + containerSizes[i].containerCode + "</option>"
            }
            selectHtml = selectHtml + "</select>";
            return selectHtml;
        }
       
        function exportDiv(trindex) {
            $("#tr2_" + trindex).show();
        }

        $("#deleteBtn").click(function () {
            $("input[name='f0']:checked").each(function () {
                var tid = $(this).val();
                $("#did_" + tid).val("1");
                $("#tr_" + $(this).val()).hide();
            });
            resetIndexes();
        })
        // function addTrTag(value1, value2, value3, value4, value5, value6) {
        //     trindex++;
        //     var trhtml = "<tr id='tr_" + trindex + "'><td><input type='checkbox' name='f0' id='f0_" + trindex + "'  value='" + trindex + "'    /></td>"
        //     trhtml = trhtml + "<td><input type='text' name='f1' id='f1_" + trindex + "' class='form-control' value='" + value1 + "'/> </td>"
        //     trhtml = trhtml + "<td><input type='text' name='f2' id='f2_" + trindex + "' class='form-control' value='" + value2 + "' /></td>"
        //     trhtml = trhtml + "<td><input type='text' name='f3' id='f3_" + trindex + "' class='form-control' value='" + value3 + "' /></td>"
        //     trhtml = trhtml + "<td><input type='text' name='f4' id='f4_" + trindex + "' class='form-control' value='" + value4 + "' /></td>"
        //     trhtml = trhtml + "<td><input type='text' name='f5' id='f5_" + trindex + "' class='form-control' value='" + value5 + "' /></td>"
        //     trhtml = trhtml + "<td><input type='text' name='f6' id='f6_" + trindex + "' class='form-control' value='" + value6 + "' /></td>"
        //     trhtml = trhtml + "</tr>"
        //     $("#trtbody").append(trhtml);
        // }
    </script>
}
<div class="page-header">
    <div class="breadcrumb-wrapper">
        <abp-breadcrumb>
            <abp-breadcrumb-item title=@L["Menu:OceanExports"] />
            <abp-breadcrumb-item title=@L["Menu:VesselSchedules.Create"] href="#" />
        </abp-breadcrumb>
    </div>
    <nav class="submenu">
        <ol>
            <li class="menu-item active">
                <a href="javascript:void(0)">@L["Tab:Basic"]</a>
            </li>
            <li class="menu-item  ">
                <a href="Edit2?Id=@Model.Id">@L["Tab:Accounting"]</a>
            </li>
            <li class="menu-item ">
                <a href="Edit3?Id=@Model.Id">@L["Tab:Doc"]</a>
            </li>
        </ol>
    </nav>
</div>
<div class="page-content-area">
    <form submit-button="true" data-ajaxForm="true" id="editForm">
        <abp-row>
            <abp-column size-md="_9">
                <div class="board-wrap">
                    <abp-card class="card board-item">
                        <abp-card-header class="card-header active" style="background:#555555;color:#FFFFFF;">

                            <abp-card-title>
                                @L["VesselSchedule"] @Model.VesselSchedule.ReferenceNo <span id="title0"></span>
                                <span id="title0" style="font-size:0.8em;"></span>
                                <span id="title2" style="font-size:0.8em;"></span>
                                <span id="title3" style="font-size:0.8em;"></span>
                                <span id="title4" style="font-size:0.8em;"></span>
                                <span id="title5" style="font-size:0.8em;"> </span>
                            </abp-card-title>


                            <!--
                            <div class="btn-group dropdown">
                                <button class="btn btn-secondary dropdown-toggle"  type="button" id="ActionDrop" data-bs-toggle="dropdown">
                                    請選擇
                                </button>
                                <div class="dropdown-menu " aria-labelledby="dropdownMenuButton1" id="ActionDrop">
                                    <a class='dropdown-item' href='#'>
                                           <li class="fa fa-lock"></li> 鎖定
                                        </a>
                            <a class='dropdown-item' href='#'>
                                <i class="fa fa-trash"></i> 刪除
                            </a>
                                    <li class="dropdown-divider"></li>
                            <a class='dropdown-item' href='#'>
                            <li class="fa fa-lock"></li> aaa
                            </a>

                                </div>
                            </div>
                            -->
                           
                            <button class="btn btn-collapse " id="btnVesselCollapse" type="button" data-bs-toggle="collapse" data-bs-target="#vesselDiv" aria-expanded="true" aria-controls="vesselDiv">
                            </button>
                        </abp-card-header>
                        <abp-card-body class="collapse show customForm" id="vesselDiv">
                            <abp-row>
                                <abp-column size-md="_3">
                                    <abp-input asp-for="VesselSchedule.ReferenceNo" />
                                </abp-column>
                                <abp-column size-md="_3">
                                    @await Component.InvokeAsync(typeof(DropdownComponent), new ComponentData { Name = "VesselSchedule.OfficeId", AspItems = Model.SubstationLookupList, IsShowLabel = true, FieldName = "OfficeId", SelectType = 0, ShowFiledContentValue = Model.VesselSchedule.OfficeId.ToString() })

                                </abp-column>
                                <abp-column size-md="_3">
                                    @await Component.InvokeAsync(typeof(DropdownComponent), new ComponentData { Name = "VesselSchedule.BlTypeId", AspItems = Model.BlTypeList, IsShowLabel = true, FieldName = "BlTypeId", SelectType = 0, ShowFiledContentValue = Model.VesselSchedule.BlTypeId.ToString() })
                                </abp-column>
                                <abp-column size-md="_3">
                                    <abp-input asp-for="VesselSchedule.PostDate" disabled=true />
                                </abp-column>
                            </abp-row>
                            <abp-row>

                                <abp-column size-md="_3">
                                    <abp-input asp-for="VesselSchedule.SoNo" />
                                </abp-column>
                                <abp-column size-md="_3">
                                    <abp-input asp-for="VesselSchedule.ItnNo" />
                                </abp-column>
                                <abp-column size-md="_3">
                                    @await Component.InvokeAsync(typeof(DropdownComponent), new ComponentData { Name = "VesselSchedule.MblCarrierId", AspItems = Model.TradePartnerLookupList, IsShowLabel = true, FieldName = "MblCarrierId", SelectType = 0, ShowFiledContentValue = Model.VesselSchedule.MblCarrierId.ToString() })
                                </abp-column>
                                <abp-column size-md="_3">
                                    @await Component.InvokeAsync(typeof(DropdownComponent), new ComponentData { Name = "VesselSchedule.BlAcctCarrierId", AspItems = Model.TradePartnerLookupList, IsShowLabel = true, FieldName = "BlAcctCarrierId", SelectType = 0, ShowFiledContentValue = Model.VesselSchedule.BlAcctCarrierId.ToString() })
                                </abp-column>
                            </abp-row>
                            <abp-row>

                                <abp-column size-md="_3">
                                    @await Component.InvokeAsync(typeof(DropdownComponent), new ComponentData { Name = "VesselSchedule.ShippingAgentId", AspItems = Model.TradePartnerLookupList, IsShowLabel = true, FieldName = "ShippingAgentId", SelectType = 0, ShowFiledContentValue = Model.VesselSchedule.ShippingAgentId.ToString() })
                                </abp-column>
                                <abp-column size-md="_3">
                                    @await Component.InvokeAsync(typeof(DropdownComponent), new ComponentData { Name = "VesselSchedule.MblOverseaAgentId", AspItems = Model.TradePartnerLookupList, IsShowLabel = true, FieldName = "MblOverseaAgentId", SelectType = 0, ShowFiledContentValue = Model.VesselSchedule.MblOverseaAgentId.ToString() })
                                </abp-column>
                                <abp-column size-md="_3">
                                    @await Component.InvokeAsync(typeof(DropdownComponent), new ComponentData { Name = "VesselSchedule.MblNotifyId", AspItems = Model.TradePartnerLookupList, IsShowLabel = true, FieldName = "MblNotifyId", SelectType = 0, ShowFiledContentValue = Model.VesselSchedule.MblNotifyId.ToString() })
                                </abp-column>
                                <abp-column size-md="_3">
                                    @await Component.InvokeAsync(typeof(DropdownComponent), new ComponentData { Name = "VesselSchedule.ForwardingAgentId", AspItems = Model.TradePartnerLookupList, IsShowLabel = true, FieldName = "ForwardingAgentId", SelectType = 0, ShowFiledContentValue = Model.VesselSchedule.ForwardingAgentId.ToString() })
                                </abp-column>
                            </abp-row>
                            <abp-row>

                                <abp-column size-md="_3">
                                    @await Component.InvokeAsync(typeof(DropdownComponent), new ComponentData { Name = "VesselSchedule.CoLoaderId", AspItems = Model.TradePartnerLookupList, IsShowLabel = true, FieldName = "CoLoaderId", SelectType = 0, ShowFiledContentValue = Model.VesselSchedule.CoLoaderId.ToString() })
                                </abp-column>
                                <abp-column size-md="_3">
                                    <label class="form-label">@L["OP"]</label>
                                    <input class="form-control" type="text" value="@(CurrentUser.Name + " " + CurrentUser.SurName)" disabled />
                                </abp-column>
                                <abp-column size-md="_3">
                                    <abp-input asp-for="VesselSchedule.VesselName" />
                                </abp-column>
                                <abp-column size-md="_3">
                                    <abp-input asp-for="VesselSchedule.Voyage" />
                                </abp-column>
                            </abp-row>

                            <abp-row>
                                <abp-column>
                                    &nbsp;
                                </abp-column>
                            </abp-row>
                            <abp-row>
                                <abp-column size-md="_3">
                                    @await Component.InvokeAsync(typeof(DropdownComponent), new ComponentData { Name = "VesselSchedule.DeliveryToId", AspItems = Model.TradePartnerLookupList, IsShowLabel = true, FieldName = "DeliveryToId", SelectType = 0, ShowFiledContentValue = Model.VesselSchedule.DeliveryToId.ToString() })

                                </abp-column>
                                <abp-column size-md="_3">
                                    @await Component.InvokeAsync(typeof(DropdownComponent), new ComponentData { Name = "VesselSchedule.EmptyPickupId", AspItems = Model.TradePartnerLookupList, IsShowLabel = true, FieldName = "EmptyPickupId", SelectType = 0, ShowFiledContentValue = Model.VesselSchedule.EmptyPickupId.ToString() })

                                </abp-column>
                                <abp-column size-md="_3">
                                    @await Component.InvokeAsync(typeof(DropdownComponent), new ComponentData { Name = "VesselSchedule.PolId", AspItems = _dropdown.PortsManagementLookupList, IsShowLabel = true, FieldName = "PolId", SelectType = 0, ShowFiledContentValue = Model.VesselSchedule.PolId.ToString() })
                                </abp-column>
                                <abp-column size-md="_3">
                                    <abp-input asp-for="VesselSchedule.PolEtd" abp-data-datepicker="false" />
                                </abp-column>
                            </abp-row>
                            <abp-row>
                                <abp-column size-md="_3">
                                    @await Component.InvokeAsync(typeof(DropdownComponent), new ComponentData { Name = "VesselSchedule.PorId", AspItems = _dropdown.PortsManagementLookupList, IsShowLabel = true, FieldName = "PorId", SelectType = 2, ShowFiledContentValue = Model.VesselSchedule.PorId.ToString() })
                                </abp-column>
                                <abp-column size-md="_3">
                                    <abp-input asp-for="VesselSchedule.PorEtd" abp-data-datepicker="false" />
                                </abp-column>
                                <abp-column size-md="_3">
                                    @await Component.InvokeAsync(typeof(DropdownComponent), new ComponentData { Name = "VesselSchedule.PodId", AspItems = _dropdown.PortsManagementLookupList, IsShowLabel = true, FieldName = "PodId", SelectType = 2, ShowFiledContentValue = Model.VesselSchedule.PodId.ToString() })
                                </abp-column>
                                <abp-column size-md="_3">
                                    <abp-input asp-for="VesselSchedule.PodEta" abp-data-datepicker="false" />
                                </abp-column>
                            </abp-row>
                            <abp-row>
                                <abp-column size-md="_3">
                                    @await Component.InvokeAsync(typeof(DropdownComponent), new ComponentData { Name = "VesselSchedule.DelId", AspItems = _dropdown.PortsManagementLookupList, IsShowLabel = true, FieldName = "DelId", SelectType = 2, ShowFiledContentValue = Model.VesselSchedule.DelId.ToString() })
                                </abp-column>
                                <abp-column size-md="_3">
                                    <abp-input asp-for="VesselSchedule.DelEta" abp-data-datepicker="false" />
                                </abp-column>
                                <abp-column size-md="_3">
                                    @await Component.InvokeAsync(typeof(DropdownComponent), new ComponentData { Name = "VesselSchedule.FdestId", AspItems = _dropdown.PortsManagementLookupList, IsShowLabel = true, FieldName = "FdestId", SelectType = 2, ShowFiledContentValue = Model.VesselSchedule.FdestId.ToString() })
                                </abp-column>
                                <abp-column size-md="_3">
                                    <abp-input asp-for="VesselSchedule.FdestEta" abp-data-datepicker="false" />
                                </abp-column>
                            </abp-row>
                            <abp-row>
                                <abp-column size-md="_3">
                                    @await Component.InvokeAsync(typeof(DropdownComponent), new ComponentData { Name = "VesselSchedule.FreightTermId", AspItems = Model.FreightTermLookupList, IsShowLabel = true, FieldName = "FreightTermId", SelectType = 2, ShowFiledContentValue = Model.VesselSchedule.FreightTermId.ToString() })
                                </abp-column>
                                <abp-column size-md="_3">
                                    @await Component.InvokeAsync(typeof(DropdownComponent), new ComponentData { Name = "VesselSchedule.ShipModeId", AspItems = Model.ShipModeLookupList, IsShowLabel = true, FieldName = "ShipModeId", SelectType = 2, ShowFiledContentValue = Model.VesselSchedule.ShipModeId.ToString() })
                                </abp-column>
                                <abp-column size-md="_3">
                                    @await Component.InvokeAsync(typeof(DropdownComponent), new ComponentData { Name = "VesselSchedule.SvcTermFromId", AspItems = Model.SvgTermLookupList, IsShowLabel = true, FieldName = "SvcTermFromId", SelectType = 2, ShowFiledContentValue = Model.VesselSchedule.SvcTermFromId.ToString() })

                                </abp-column>
                                <abp-column size-md="_3">
                                    @await Component.InvokeAsync(typeof(DropdownComponent), new ComponentData { Name = "VesselSchedule.SvcTermToId", AspItems = Model.SvgTermLookupList, IsShowLabel = true, FieldName = "SvcTermToId", SelectType = 2, ShowFiledContentValue = Model.VesselSchedule.SvcTermToId.ToString() })
                                </abp-column>

                            </abp-row>
                            <abp-row>
                                <abp-column size-md="_3">
                                    @await Component.InvokeAsync(typeof(DropdownComponent), new ComponentData { Name = "VesselSchedule.OblTypeId", AspItems = Model.OblTypeList, IsShowLabel = true, FieldName = "OblTypeId", SelectType = 2, ShowFiledContentValue = Model.VesselSchedule.OblTypeId.ToString() })
                                </abp-column>
                                <abp-column size-md="_3">
                                    <abp-input asp-for="VesselSchedule.RailCutOffTime" abp-data-datepicker="false" />
                                </abp-column>
                                <abp-column size-md="_3">
                                    <abp-input asp-for="VesselSchedule.PortCutOffTime" abp-data-datepicker="false" />
                                </abp-column>
                                <abp-column size-md="_3">
                                    <abp-input asp-for="VesselSchedule.VgmCutOffTime " abp-data-datepicker="false" />
                                </abp-column>
                            </abp-row>
                            <abp-row>
                                <abp-column size-md="_3">
                                    <abp-input asp-for="VesselSchedule.OnBoardDate" abp-data-datepicker="false" />
                                </abp-column>
                                <abp-column size-md="_3">
                                    <abp-input asp-for="VesselSchedule.SubBlNo" />
                                </abp-column>
                                <abp-column size-md="_3">
                                    <abp-input asp-for="VesselSchedule.ServiceContactNo" />
                                </abp-column>
                                <abp-column size-md="_3">
                                    <abp-input asp-for="VesselSchedule.ForwardRefNo" />
                                </abp-column>
                            </abp-row>
                            <abp-row>
                                <abp-column size-md="_3">
                                    @await Component.InvokeAsync(typeof(DropdownComponent), new ComponentData { Name = "VesselSchedule.TransPort1Id", AspItems = Model.TransPortList, IsShowLabel = true, FieldName = "TransPort1Id", SelectType = 2, ShowFiledContentValue = Model.VesselSchedule.TransPort1Id.ToString() })
                                </abp-column>
                                <abp-column size-md="_3">
                                    <abp-input asp-for="VesselSchedule.Trans1Eta" abp-data-datepicker="false" />
                                </abp-column>
                                <abp-column size-md="_6">
                                    
                                </abp-column>
                            </abp-row>
                            <abp-row>

                            </abp-row>
                            <abp-row>

                                <abp-column size-md="_12">
                                    <div>
                                        集裝箱清單
                                        <abp-button class="btn btn-success me-md-2" type="button" id="addBtn">+</abp-button>
                                        <abp-button class="btn btn-outline-danger me-md-2" type="button" id="deleteBtn">-</abp-button>
                                        <abp-dropdown>
                                            <abp-dropdown-button text="Create MB/L" button-type="Outline_Dark" />
                                            <abp-dropdown-menu>
                                                <abp-dropdown-item href="javascript:void(0)" onclick="createMbl()"><i class="fas fa-compress-alt"></i>Create 1 MB/L</abp-dropdown-item>
                                                <abp-dropdown-item id="btnExcelConfiguration" href="javascript:void(0)" onclick="createMblforEachBooking()"><i class="fas fa-expand-alt"></i>Create 1 MB/L for each booking</abp-dropdown-item>
                                                  
                                            </abp-dropdown-menu>
                                        </abp-dropdown>
                                    </div>
                                    <table width="100%" border="1" style="border-block-color:#333333;padding-left:10px;margin:4px;">
                                        <tr style="border:1;border-block-color:#333333;padding-left:10px;margin-left:4px;">
                                            <th width="5%"><input type="checkbox" id="checkAll" /></th>
                                            <th width="5%" class="text-center"><b>#</b></th>
                                            <th width="12%">@L["Display:ContainerNo"]</th>
                                            <th width="12%">@L["Display:TP/SZ"]</th>
                                            <th width="12%">@L["Display:Seal No"]</th>
                                            <th width="12%">@L["Display:BookingNo"]</th>
                                            <th width="8%">@L["PKG"]</th>
                                            <th width="16%">@L["Display:Weight"]</th>
                                            <th width="16%">@L["Display:Volume"]</th>
                                        </tr>
                                        <tbody id="trtbody">
                                        </tbody>

                                    </table>

                                </abp-column>
                            </abp-row>
                            <abp-row>
                                <abp-column>
                                    <abp-card-header style="background:#cccccc;color:#FFFFFF;">
                                        @L["Title:Memo"]
                                    </abp-card-header>
                                    <abp-card>
                                        <abp-card-body>
                                            <partial name="Memos/_Memo" model="new _MemoModel(Model.Id, Dolphin.Freight.Common.FreightPageType.VS)" />
                                        </abp-card-body>
                                    </abp-card>
                                </abp-column>
                            </abp-row>
                        </abp-card-body>
                    </abp-card>
                    <br />

                    <!-- ExportBooking Card-->
                    <div id="partialContainer">
                    </div>
                </div>
            </abp-column>
            <abp-column size-md="_3">


                <div class="card-wrap">

                    <button class="btn btn-block btn-add" type="button" id="addHBtn">
                        <i class="fa-solid fa-plus"></i>@L["Btn:AddSO"].Value
                    </button>
                    <div class="booking_sm_area" id="bookingCards">
                    </div>

                </div>


            </abp-column>
        </abp-row>
        <abp-row class="mt-3" id="ejo">
            <abp-column>
                <input type="hidden" name="VesselSchedule.OfficeId" id="mOfficeId" value="@Model.VesselSchedule.OfficeId" />
                <input type="hidden" name="VesselSchedule.SvcTermFromId" id="mSvcTermFromId" value="@Model.VesselSchedule.SvcTermFromId" />
                <input type="hidden" name="VesselSchedule.SvcTermToId" id="mSvcTermToId" value="@Model.VesselSchedule.SvcTermToId" />
                <input type="hidden" name="VesselSchedule.ShipModeId" id="mShipModeId" value="@Model.VesselSchedule.ShipModeId" />
                <input type="hidden" name="VesselSchedule.FreightTermId" id="mFreightTermId" value="@Model.VesselSchedule.FreightTermId" />
                <input type="hidden" name="VesselSchedule.BlTypeId" id="mBlTypeId" value="@Model.VesselSchedule.BlTypeId" />
                <input type="hidden" name="VesselSchedule.OblTypeId" id="mOblTypeId" value="@Model.VesselSchedule.OblTypeId" />

                <input type="hidden" name="VesselSchedule.MblCarrierId" id="mMblCarrierId" value="@Model.VesselSchedule.MblCarrierId" />
                <input type="hidden" name="VesselSchedule.BlAcctCarrierId" id="mBlAcctCarrierId" value="@Model.VesselSchedule.BlAcctCarrierId" />
                <input type="hidden" name="VesselSchedule.ShippingAgentId" id="mShippingAgentId" value="@Model.VesselSchedule.ShippingAgentId" />
                <input type="hidden" name="VesselSchedule.MblOverseaAgentId" id="mMblOverseaAgentId" value="@Model.VesselSchedule.MblOverseaAgentId" />
                <input type="hidden" name="VesselSchedule.MblNotifyId" id="mMblNotifyId" value="@Model.VesselSchedule.MblNotifyId" />
                <input type="hidden" name="VesselSchedule.EmptyPickupId" id="mEmptyPickupId" value="@Model.VesselSchedule.EmptyPickupId" />
                <input type="hidden" name="VesselSchedule.DeliveryToId" id="mDeliveryToId" value="@Model.VesselSchedule.DeliveryToId" />
                <input type="hidden" name="VesselSchedule.CoLoaderId" id="mCoLoaderId" value="@Model.VesselSchedule.CoLoaderId" />
                <input type="hidden" name="VesselSchedule.ForwardingAgentId" id="mForwardingAgentId" value="@Model.VesselSchedule.ForwardingAgentId" />
                <input type="hidden" name="VesselSchedule.PorId" id="mPorId" value="@Model.VesselSchedule.PorId" />
                <input type="hidden" name="VesselSchedule.PolId" id="mPolId" value="@Model.VesselSchedule.PolId" />
                <input type="hidden" name="VesselSchedule.PodId" id="mPodId" value="@Model.VesselSchedule.PodId" />
                <input type="hidden" name="VesselSchedule.DelId" id="mDelId" value="@Model.VesselSchedule.DelId" />
                <input type="hidden" name="VesselSchedule.FdestId" id="mFdestId" value="@Model.VesselSchedule.FdestId" />
                <input type="hidden" name="VesselSchedule.TransPort1Id" id="mTransPort1Id" value="@Model.VesselSchedule.TransPort1Id" />

                <div style="position: fixed; bottom: 55px; left: 0; right: 0; text-align:center;">
                    <abp-button class="btn btn-primary me-md-2" type="submit" id="saveBtn">@L["Save"].Value</abp-button>
                </div>
            </abp-column>
        </abp-row>
        <abp-row>
            <abp-column>
                &nbsp;
            </abp-column>
        </abp-row>
    </form>
</div>