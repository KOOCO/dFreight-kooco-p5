@page
@using Dolphin.Freight.Localization
@using Dolphin.Freight.Permissions
@using Microsoft.AspNetCore.Authorization
@using Dolphin.Freight.Web.Pages.Components
@using Dolphin.Freight.Web.CommonService
@using Microsoft.Extensions.Localization
@model Dolphin.Freight.Web.Pages.OceanExports.VesselSchedules.IndexModel
@inject IStringLocalizer<FreightResource> L
@inject IAuthorizationService AuthorizationService
@inject IDropdownService _dropdown;

@section scripts{
     <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.3/xlsx.full.min.js"></script>
     <script src="https://cdnjs.cloudflare.com/ajax/libs/TableExport/5.2.0/js/tableexport.min.js"></script>
    <script type="text/javascript">
        var _changeInterval = null;
        var l = abp.localization.getResource('Freight');
        var dataTable;
        var queryListFilter = function () {
            return {
                search: $("#Keyword").val(),
                officeId: $("#VesselSchedule_OfficeId").val() == '' ? null : $("#VesselSchedule_OfficeId").val(),
                ovearseaAgentId: $("#VesselSchedule_OverseaAgentId").val() == '' ? null : $("#VesselSchedule_OverseaAgentId").val(),
                carrierId: $("#VesselSchedule_CarrierId").val() == '' ? null : $("#VesselSchedule_CarrierId").val() ,
                shippingAgentId: $("#VesselSchedule_ShippingAgentId").val() == '' ? null : $("#VesselSchedule_ShippingAgentId").val(),
                forwardingAgentId: $("#VesselSchedule_ForwardingAgentId").val() == '' ? null : $("#VesselSchedule_ForwardingAgentId").val(),
                blTypeId: $("#VesselSchedule_BlTypeId").val() == '' ? null : $("#VesselSchedule_BlTypeId").val(),
                pol: $("#VesselSchedule_PolId").val() == '' ? null : $("#VesselSchedule_PolId").val(),
                shipModeId: $("#VesselSchedule_ShipModeId").val() == '' ? null : $("#VesselSchedule_ShipModeId").val(),
                postDate: $("#PostDate").val() == '' || $("#PostDate").val() == null ? null : new Date($("#PostDate").val()),

                eta: $("#ETA").val() == '' || $("#ETA").val() == null ? null : new Date($("#ETA").val()),
                etd: $("#ETD").val() == '' || $("#ETD").val() == null ? null : new Date($("#ETD").val()),
                vessel: $("#Vessel").val(),
              
                
            };
        };
        $(document).ready(function () {

            var l = abp.localization.getResource('Freight');
          
           

                                            
            var columns = [
                {
                    title: '<input type="checkbox" id="selectAllCheckbox" disable="true" onclick="selectAllCheckbox(this)" style=" cursor: pointer;">',
                    data: null,
                    orderable: false,
                    render: function (data, type, row) {
                        var id = row.id;
                        $('#selectAllCheckbox').prop('checked', false);
                        return '<input type="checkbox" class="selectCheckbox" data-id="' + id + '" onclick="selectCheckbox(this)" style=" cursor: pointer;">';
                    }
                },
                {
                    title: l('Actions'),
                    orderable: false,
                    rowAction: {
                        items:
                            [
                                {
                                    text: l('Edit'),
                                    visible: abp.auth.isGranted('Settings.ItNoRanges.Edit'), //CHECK for the PERMISSION
                                    action: function (data) {
                                        if (data.record.isLocked) {
        
                                        }
                                        location.href = 'Edit?Id=' + data.record.id;
        
                                    }
                                },
                                {
                                    text: l('Delete'),
                                    visible: abp.auth.isGranted('Settings.ItNoRanges.Delete'),

                                    action: function (data) {
                                        abp.message.confirm(l('DeletionConfirmationMessage'))
                                            .then(function (confirmed) {
                                                if (confirmed) {
                                                    dolphin.freight.importExport.oceanExports.vesselScheduleas.vesselSchedule
                                                        .delete(data.record.id)
                                                        .then(function () {
                                                            abp.message.success(l('SuccessfullyDeleted'));
                                                            dataTable.ajax.reload();
                                                        });
                                                }
                                            });


                                    }
                                }
                            ]
                        }
            
                },
             
            ]



            dolphin.freight.web.controllers.configuration.getJsonConfig('VesselSchedules').done(function (data) {
                data.forEach(function (item) {
                    if (!item.lock && item.checkable) {
                    
                        var column;


                        column = {
                            title: l(item.text),
                            data: item.name
                        };
                 
                        columns.push(column);
                    }

                });

                var col = (columns.length > 2) ? [[2, 'asc']] : [[0, 'asc']];





               dataTable = $('#VesselScheduleListTable').DataTable(
                    abp.libs.datatables.normalizeConfiguration({
                        serverSide: true,
                paging: true,
                order: col,
                searching: false,
                scrollX: true,
                processing: true,
                    
                responsive: {
                    details: {
                        type: 'column'
                    }
                },
                        ajax: abp.libs.datatables.createAjax(dolphin.freight.importExport.oceanExports.vesselScheduleas.vesselSchedule.queryList, queryListFilter),
                        columnDefs: columns
                    })
                );
            });


               $('#btnConfiguration').click(function (e) {
        var _configurationModal = new abp.ModalManager({
            viewUrl: abp.appPath + 'Configuration',
            modalClass: 'ConfigurationViewModel'
        });

        _configurationModal.open({
            src: 'VesselSchedules'
        });
    })

     $('#btnExcelConfiguration').click(function (e) {
                var _excelExportConfigurationModal = new abp.ModalManager({
                    viewUrl: abp.appPath + 'ExportExcelConfiguration',
                    modalClass: 'ExcelExportConfigurationViewModel'
                });
                    _excelExportConfigurationModal.open({
                        src: 'VesselSchedulesExcelList'
                       
                    });

        });
            // $('#Search').keyup(function () {
            //     clearInterval(_changeInterval)
            //     _changeInterval = setInterval(function () {
            //         dataTable.ajax.reload();
            //         clearInterval(_changeInterval)
            //     }, 1000);
            // });
            $('#Search').click(function (e) {
                dataTable.ajax.reload();
            });
            $('#CancelFilter').click(function (e) {
                $("#Keyword").val(null);
                $("select[name='VesselSchedule.OfficeId']").val(null).trigger("change");
                // $("#VesselSchedule_OfficeId").val(null);
                $("select[name='VesselSchedule_OverseaAgentId']").val(null);
                $("select[name = 'VesselSchedule_CarrierId']").val(null).trigger("change");
                $("select[name='VesselSchedule_ShippingAgentId']").val(null).trigger("change");
                $("select[name='VesselSchedule_ForwardingAgentId']").val(null).trigger("change");
                $("select[name='VesselSchedule_BlTypeId']").val(null).trigger("change");
                $("select[name='VesselSchedule_PolId']").val(null).trigger("change");
                $("select[name='VesselSchedule_ShipModeId']").val(null).trigger("change");
                $("#PostDate").val(null);
                $("#ETA").val(null);
                $("#ETD").val(null);
                $("#Vessel").val(null);
                dataTable.ajax.reload();
            });
            $('#NewVesselScheduleButton').click(function (e) {
                location.href = 'Create';
            });

        });

        function selectAllCheckbox(element) {
            var isChecked = $(element).prop('checked');
            $('#VesselScheduleListTable tbody input.selectCheckbox[type="checkbox"]').prop('checked', isChecked);
            if (isChecked) {
                $('#deleteBtn').prop('disabled', false);
            }
            else {
            $('#deleteBtn').prop('disabled', true);
            }
        }
        function deleteVessels() {
    var ids = [];
    var selectedCheckboxes = $('#VesselScheduleListTable tbody input.selectCheckbox[type="checkbox"]:checked');
    for (var i = 0; i < selectedCheckboxes.length; i++) {
        var id = selectedCheckboxes[i].attributes[2].value;
    
            ids.push(id);
        }
        abp.message.confirm(l('DeleteConfirmationMessage')).then(function (confirmed) {
            if (confirmed) {
                dolphin.freight.importExport.oceanExports.vesselScheduleas.vesselSchedule.deleteMultipleVessel(ids)
                    .done(function () {
                        abp.message.success(l('Message:SuccessDelete'));
                        dataTable.ajax.reload();
                    });
            }
        });
    }

        function selectCheckbox(checkbox) {
            var checkedCheckboxes = $('.selectCheckbox:checked');
            if (checkbox.checked) {
                checkedCheckboxes.each(function (index, checkbox1) {
                    $('#deleteBtn').prop('disabled', false);
                    if(checkedCheckboxes.length == 1){
                        $('#copyBtn').prop('disabled', false);
                    }else{
                        $('#copyBtn').prop('disabled', true);
                    }
                });
            } else {
                var checkedCheckboxes = $('.selectCheckbox:checked');
                
                if (checkedCheckboxes && checkedCheckboxes.length == 0){
                    $('#deleteBtn').prop('disabled', true);
                    $('#copyBtn').prop('disabled', true);
                } else if (checkedCheckboxes.length == 1){
                    $('#copyBtn').prop('disabled', false);
                }
            }
            if (!$(checkbox).prop('checked')) {
                $('#selectAllCheckbox').prop('checked', false);
            } else {
                var allChecked = true;
                $('#VesselScheduleListTable tbody input.selectCheckbox[type="checkbox"]').each(function () {
                    if (!$(this).prop('checked')) {
                        allChecked = false;
                        return false;
                    }
                });
                $('#selectAllCheckbox').prop('checked', allChecked);
            }
        }

        function createNew() {
            window.location.href = "/OceanExports/VesselSchedules/Create";
        }

        $('#copyBtn').click(function(){ 
            $.ajax({
                url: '/Docs/CopyVesselSchedulePopupPartial',
                type: 'GET',
                dataType: "html",
                success: function (res) {
                    $('#VesselSchlCopyModal').html(res);
                    $('#VesselSchlCopyModal').modal('show');

                    const checkbox = document.getElementById('HBLPrintCB');
                    const button = document.getElementById('HBLDocPKGBtn');
                    
                    checkbox.addEventListener('change', function() {
                        if (checkbox.checked) {
                            button.removeAttribute('disabled');
                        } else {
                            button.setAttribute('disabled', 'disabled');
                        }
                    });
                }
            });
        });

        function exportToExcel() {

            var table = document.getElementById("VesselScheduleListTable");

            // Define the columns to exclude (e.g., first two columns)
            var columnsToExclude = [0, 1];

            // Create a new worksheet
            var ws = XLSX.utils.aoa_to_sheet([]);

            // Create a style object for the header row
            var headerStyle = {
                font: { bold: true },
                fill: { bgColor: { indexed: 23 }, fgColor: { indexed: 23 } }, // Blue color
                alignment: { horizontal: "center" }, // Center-align text
            };

            // Iterate through table rows and build the new worksheet
            for (var rowIndex = 0; rowIndex < table.rows.length; rowIndex++) {
                var row = table.rows[rowIndex];
                var newRow = [];
                for (var colIndex = 0; colIndex < row.cells.length; colIndex++) {
                    if (!columnsToExclude.includes(colIndex)) {
                        newRow.push(row.cells[colIndex].innerText);
                    }
                }
                XLSX.utils.sheet_add_aoa(ws, [newRow], { origin: -1 });
            }

            // Apply the header style to the first row
            XLSX.utils.format_cell(ws['A1'], headerStyle);
            XLSX.utils.format_cell(ws['B1'], headerStyle);
            XLSX.utils.format_cell(ws['C1'], headerStyle);
            // Add more cells as needed for additional columns

            // Create a new workbook and add the worksheet
            var wb = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(wb, ws, "Sheet1");

            // Save the workbook as an Excel file
            XLSX.writeFile(wb, "VesselScheduleList.xlsx");
        }
        function Cancel(){
            $('#VesselSchlCopyModal').modal('hide');
        }

        function onSave() {
            var copyVesselOnly;

            if ($('#HBLPrintCB')[0].checked){
                copyVesselOnly = 'vesselOnly';
            }

            var checkedCheckbox = $('.selectCheckbox:checked');
            var vesselId = $('.selectCheckbox:checked').attr('data-id');

            var ajaxParams = undefined;

            abp.ajax($.extend(true, {
                        url: abp.appPath + 'api/ImportExport/VesselSchedulesCopy?id=' + vesselId +'&copyVesselOnly=' + copyVesselOnly,
                        type: 'POST',
                    }, ajaxParams)).done(function (res) {
                        window.location.href = "/OceanExports/VesselSchedules/Edit?Id=" + res.newVesselId +'&status=' + res.status;
                    });
        }

    </script>

}
<div class="page-header">
    <div class="breadcrumb-wrapper">
        <abp-breadcrumb>
            <abp-breadcrumb-item title=@L["Menu:OceanExports"] />
            <abp-breadcrumb-item title=@L["Menu:VesselSchedules.Index"] href="#" />
        </abp-breadcrumb>
    </div>
</div>
<div class="page-content-area">
    <abp-card>
        <abp-card-header>
             <abp-row class="w-100">
                <abp-column size-md="_6">
            <div class="title">
                @L["Menu:VesselSchedules.Index"]
            </div>
              </abp-column>
                <abp-column size-md="_6" class="text-end p-0">
                      <abp-button id="FilterGlCodeButton"
                            text="@L["Filter"].Value"
                            icon="filter"
                            button-type="Primary"
                            data-bs-toggle="collapse" data-bs-target="#mblDiv" aria-expanded="true" aria-controls="mblDiv" />
              <abp-button id="btnConfiguration"
                                text="@L["Configuration"].Value"
                                icon="gear"
                                button-type="Primary" />
                                   <abp-dropdown>
    <abp-dropdown-button icon="file-excel-o" text="Excel" button-type="Outline_Dark"   />
    <abp-dropdown-menu>
        <abp-dropdown-item href="javascript:void(0)" onclick="exportToExcel()"><i class="fa fa-cloud-download"></i>Download</abp-dropdown-item>
        <abp-dropdown-item id="btnExcelConfiguration"  href="javascript:void(0)"><i class="fa fa-cogs"></i>Config</abp-dropdown-item>
      
    </abp-dropdown-menu>
</abp-dropdown>
                        </abp-column>
                        </abp-row>
        </abp-card-header>
         <abp-card-body class="collapse hide" id="mblDiv">
            <abp-row class="mb-3">
                <abp-column size-md="_1">
                    <label>@L["Keyword"].Value</label>
                </abp-column>
                <abp-column size-md="_2">
                    <input class="form-control" id="Keyword" />
                </abp-column>
                <abp-column size-md="_1">
                    <label>@L["OfficeId"].Value</label>
                </abp-column>
                <abp-column size-md="_2">
                    @await Component.InvokeAsync(typeof(DropdownComponent), new ComponentData { Name = "VesselSchedule.OfficeId", AspItems = Model.SubstationLookupList, IsShowLabel = false, FieldName = "OfficeId", SelectType = 2,ShowFiledContentValue=null })

                    
                </abp-column>
                <abp-column size-md="_1">
                    <label>@L["OvearseaAgent"].Value</label>
                </abp-column>
                <abp-column size-md="_2">
                    @await Component.InvokeAsync(typeof(DropdownComponent), new ComponentData { Name = "VesselSchedule.OverseaAgentId", AspItems = Model.TradePartnerLookupList, IsShowLabel = false, FieldName = "MblOverseaAgentId", SelectType = 2,ShowFiledContentValue=null})
                </abp-column>
                <abp-column size-md="_1">
                    <label>@L["Carrier"].Value</label>
                </abp-column>
                <abp-column size-md="_2">
                    @await Component.InvokeAsync(typeof(DropdownComponent), new ComponentData { Name = "VesselSchedule.CarrierId", AspItems = Model.TradePartnerLookupList, IsShowLabel = false, FieldName = "MblCarrierId", SelectType = 2,ShowFiledContentValue=null })
                </abp-column>

            </abp-row>
         
            <abp-row class="mb-3">
                <abp-column size-md="_1">
                    <label>@L["Vessel"].Value</label>
                </abp-column>
                <abp-column size-md="_2">
                    <input class="form-control" id="Vessel" />
                </abp-column>
                <abp-column size-md="_1">
                    <label>@L["Pol/Pod"].Value</label>
                </abp-column>
                <abp-column size-md="_2">
                    @await Component.InvokeAsync(typeof(DropdownComponent), new ComponentData { Name = "VesselSchedule.PolId",Selected=null, AspItems = _dropdown.PortsManagementLookupList, IsShowLabel = false, FieldName = "PolId", SelectType = 2,ShowFiledContentValue=null })
                </abp-column>
                <abp-column size-md="_1">
                    <label>@L["ShippingAgent"].Value</label>
                </abp-column>
                <abp-column size-md="_2">
                    @await Component.InvokeAsync(typeof(DropdownComponent), new ComponentData { Name = "VesselSchedule.ShippingAgentId",Selected=null, AspItems = Model.TradePartnerLookupList, IsShowLabel = false, FieldName = "ShippingAgentId", SelectType = 2,ShowFiledContentValue=null })
                </abp-column>
                <abp-column size-md="_1">
                    <label>@L["ForwardingAgent"].Value</label>
                </abp-column>
                <abp-column size-md="_2">
                    @await Component.InvokeAsync(typeof(DropdownComponent), new ComponentData { Name = "VesselSchedule.ForwardingAgentId",Selected=null, AspItems = Model.TradePartnerLookupList, IsShowLabel = false, FieldName = "ForwardingAgentId", SelectType = 2,ShowFiledContentValue=null })
                </abp-column>

            </abp-row>
            <abp-row class="mb-3">
                <abp-column size-md="_1">
                    <label>@L["PostDate"].Value</label>
                </abp-column>
                <abp-column size-md="_2">
                    <input class="form-control" type="date" id="PostDate" />
                </abp-column>
                <abp-column size-md="_1">
                    <label>@L["ShipMode"].Value</label>
                </abp-column>
                <abp-column size-md="_2">
                    @await Component.InvokeAsync(typeof(DropdownComponent), new ComponentData { Name = "VesselSchedule.ShipModeId",Selected=null, AspItems = Model.ShipModeLookupList, IsShowLabel = false, FieldName = "ShipModeId",ShowFiledContentValue=null })
                </abp-column>
               
               
                <abp-column size-md="_1">
                    <label>@L["ETD"].Value</label>
                </abp-column>
                <abp-column size-md="_2">
                    <input type="date" class="form-control" id="ETD" />
                </abp-column>
                <abp-column size-md="_1">
                    <label>@L["ETA"].Value</label>
                </abp-column>
                <abp-column size-md="_2">
                    <input type="date" class="form-control" id="ETA" />
                </abp-column>
            </abp-row>
            <abp-row class="mb-3">
                
                <abp-column size-md="_1">
                    <label>@L["BLType"].Value</label>
                </abp-column>
                <abp-column size-md="_2">
                    @await Component.InvokeAsync(typeof(DropdownComponent), new ComponentData { Name = "VesselSchedule.BlTypeId", Selected=null, AspItems = Model.BlTypeList, IsShowLabel = false, FieldName = "BlTypeId", SelectType = 2,ShowFiledContentValue=null})
                </abp-column>
                <abp-column size-md="_1">
                    <label>@L["Block"].Value</label>
                </abp-column>
                <abp-column size-md="_2">
                    <input class="form-control" id="BlockId" />
                </abp-column>
               

            </abp-row>
            
            <abp-row>
                <abp-abp-column class="text-center">
               
                    <abp-button type="button" id="CancelFilter" text="@L["Cancel"]" button-type="Danger" />

                    <abp-button type="button" id="Search" text="@L["Search"]" button-type="Primary" />
               
                </abp-abp-column>
            </abp-row>
            </abp-card-body>
        <abp-card-body>
            <div class="text-end">
              
              
            </div>
            <div class="portlet-tool">
                <div class="btn-group" role="group" aria-label="Basic outlined example" style="cursor: no-drop;">
                    <button type="button" class="btn btn-outline-secondary fa fa-plus" onclick="createNew()" id="newBtn"></button>
                    <button type="button" class="btn btn-outline-secondary fa fa-trash" onclick="deleteVessels()" id="deleteBtn" disabled></button>
                    <button type="button" class="btn btn-outline-secondary" id="copyBtn" disabled><i class="fa fa-files-o me-0"></i></button>
                </div>
            </div>
            <abp-table class="nowrap" striped-rows="true" id="VesselScheduleListTable"></abp-table>
        </abp-card-body>
    </abp-card>
</div>

<div class="modal" id="VesselSchlCopyModal"></div>
